// Given the head of a singly linked list, return true if it is a or false otherwise.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

class Solution {
    public boolean isPalindrome(ListNode head) {
        if (head == null || head.next == null){
            return true;
        }

        // get middle node
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next !=null){ 
            slow = slow.next;
            fast = fast.next.next;
        }

        //reversing nodes
        ListNode prev = null;
        ListNode curr = slow;

        while (curr != null){
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }

        // compare halves
        ListNode firstHalf = head;
        ListNode secondHalf = prev; // prev is now head of reversed second half
        
        while (secondHalf != null) {
            if (firstHalf.val != secondHalf.val) {
                return false;
            }
            firstHalf = firstHalf.next;
            secondHalf = secondHalf.next;
        }
        
        return true;

    }
}
